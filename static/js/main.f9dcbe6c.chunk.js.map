{"version":3,"sources":["Home/components/RebalanceTable/RebalanceTableTr/RebalanceTableTr.js","Home/components/RebalanceTable/RebalanceTable.js","Home/components/Options/Options.js","share/components/Alerts/Alert.js","share/components/Alerts/Alerts.js","Home/Home.js","App.js","index.js"],"names":["RebalanceTableTr","data","handleChange","handleRemove","differenceBetweenShares","className","recommendation","type","value","ticker","name","onChange","min","currentPrice","amount","currentSum","currentShare","max","desiredShare","onClick","RebalanceTable","tableData","total","addTicker","updateTicker","removeTicker","tableRows","map","index","event","target","Options","options","handleChangeOptions","updatedOptions","replenishment","Alert","message","Alerts","messages","length","alerts","Home","defaultTicker","requiredSum","defaultTotal","useState","setOptions","setTableData","setTotal","setMessages","updateTable","tableOptions","updateTotal","toFixed","getRecommendation","validateTable","newTotal","reduce","newMessages","push","Math","floor","tableDataIndex","filter","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9dcbe6c.chunk.js","sourcesContent":["import React from 'react';\n\nconst RebalanceTableTr = ({data, handleChange, handleRemove}) => {\n    let differenceBetweenShares = null;\n    if (data.differenceBetweenShares > 0) {\n        differenceBetweenShares = <span className=\"text-danger\">(+{data.differenceBetweenShares}%)</span>;\n    } else if (data.differenceBetweenShares < 0) {\n        differenceBetweenShares = <span className=\"text-success\">({data.differenceBetweenShares}%)</span>;\n    }\n\n    let recommendation = null;\n    if (data.recommendation <= -1) {\n        recommendation = <span className=\"text-danger\">Продать {-data.recommendation}шт</span>;\n    } else if (data.recommendation >= 1) {\n        recommendation = <span className=\"text-success\">Купить {data.recommendation}шт</span>;\n    }\n\n    return (\n        <tr>\n            <td>\n                <input\n                    type=\"text\"\n                    className=\"input\"\n                    value={data?.ticker}\n                    name=\"ticker\"\n                    onChange={handleChange}\n                />\n            </td>\n            <td>\n                <input\n                    type=\"number\"\n                    className=\"input\"\n                    min=\"1\"\n                    value={data?.currentPrice}\n                    name=\"currentPrice\"\n                    onChange={handleChange}\n                />\n            </td>\n            <td>\n                <input\n                    type=\"number\"\n                    className=\"input\"\n                    min=\"1\"\n                    value={data?.amount}\n                    name=\"amount\"\n                    onChange={handleChange}\n                />\n            </td>\n            <td>{data.currentSum}</td>\n            <td>{data.currentShare} {differenceBetweenShares}</td>\n            <td>\n                <input\n                    type=\"number\"\n                    className=\"input\"\n                    min=\"1\"\n                    max=\"99\"\n                    value={data?.desiredShare}\n                    name=\"desiredShare\"\n                    onChange={handleChange}\n                />\n            </td>\n            <td>{recommendation}</td>\n            <td><button className=\"btn btn-danger\" onClick={handleRemove}>Удалить</button></td>\n        </tr>\n    );\n};\n\nexport default RebalanceTableTr;\n","import React from 'react';\nimport RebalanceTableTr from './RebalanceTableTr/RebalanceTableTr'\n\nconst RebalanceTable = ({tableData, total, addTicker, updateTicker, removeTicker}) => {\n    const tableRows = tableData.map((data, index) =>\n        <RebalanceTableTr\n            key={index}\n            data={data}\n            handleChange={(event) => updateTicker(event.target.value, event.target.name, index)}\n            handleRemove={() => removeTicker(index)}\n        />\n    );\n\n    return (\n        <div className=\"rebalance-table card\">\n            <table className=\"table mb\">\n                <thead>\n                    <tr>\n                        <th>Тикер</th>\n                        <th>Текущая цена за 1 шт. (руб.)</th>\n                        <th>Количество (шт.)</th>\n                        <th>Сумма (руб.)</th>\n                        <th>Текущая доля (%)</th>\n                        <th>Желаемая доля (%)</th>\n                        <th>Рекомендация</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {tableRows}\n                </tbody>\n                <tfoot>\n                    <tr>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td>{total.currentSum}</td>\n                        <td>100</td>\n                        <td>{total.desiredShare}</td>\n                        <td></td>\n                        <td></td>\n                    </tr>\n                </tfoot>\n            </table>\n            <button className=\"btn\" onClick={addTicker}>Добавить тикер</button>\n        </div>\n    );\n};\n\nexport default RebalanceTable;\n","import React from 'react';\n\nconst Options = ({options, handleChangeOptions}) => {\n    const handleChange = (event) => {\n        const updatedOptions = {...options, [event.target.name]: event.target.type === 'number' ? +event.target.value : event.target.value};\n        handleChangeOptions(updatedOptions);\n    };\n\n    return (\n        <div className=\"card\">\n            <label className=\"label mb\">\n                Тип операции:\n                <select className=\"input\" name=\"type\" value={options?.type} onChange={handleChange}>\n                    <option value=\"rebadance\">Ребалансировка</option>\n                    <option value=\"purchase\">Только покупка</option>\n                    <option value=\"sale\">Только продажа</option>\n                </select>\n            </label>\n            <label className=\"label\">\n                Сумма пополнения:\n                <input type=\"number\" className=\"input\" name=\"replenishment\" value={options?.replenishment || 0} onChange={handleChange}/>\n                (руб.)\n            </label>\n        </div>\n    );\n};\n\nexport default Options;\n","import React from 'react';\nimport './Alert.css';\n\nconst Alert = ({message}) => {\n    return (\n        <div className=\"alert danger\">{message}</div>\n    );\n};\n\nexport default Alert;\n","import React from 'react';\nimport Alert from \"./Alert\";\n\nconst Alerts = ({messages}) => {\n    if (!messages || messages.length ===0) {\n        return null;\n    }\n\n    const alerts = messages.map((message) =>\n        <Alert message={message}/>\n    );\n\n    return (\n        <div className=\"alerts\">\n            {alerts}\n        </div>\n    );\n};\n\nexport default Alerts;\n","import React, {useState} from 'react';\nimport RebalanceTable from './components/RebalanceTable/RebalanceTable';\nimport Options from \"./components/Options/Options\";\nimport Alerts from \"../share/components/Alerts/Alerts\";\n\nconst Home = () => {\n    const defaultTicker = {\n        currentPrice: 0,\n        amount: 0,\n        currentSum: 0,\n        currentShare: 0,\n        desiredShare: 0,\n        differenceBetweenShares: 0,\n        requiredSum: 0,\n        recommendation: 0\n    };\n\n    const defaultTotal = {\n        currentSum: 0,\n        desiredShare: 0\n    };\n\n    const [options, setOptions] = useState();\n    const [tableData, setTableData] = useState([defaultTicker]);\n    const [total, setTotal] = useState(defaultTotal);\n    const [messages, setMessages] = useState([]);\n\n    const handleChangeOptions = (tableOptions) => {\n        setOptions(tableOptions);\n        updateTable(tableData, tableOptions);\n    };\n\n    const addTicker = () => {\n        updateTable([...tableData, {...defaultTicker}])\n    };\n\n    const removeTicker = (index) => {\n        updateTable(tableData.filter((data, tableDataIndex) => index !== tableDataIndex))\n    };\n\n    const updateTicker = (value, name, index) => {\n        updateTable(tableData.map((data, tableDataIndex) => {\n            if (tableDataIndex === index) {\n                data[name] = value;\n            }\n            data.currentSum = data?.currentPrice && data?.amount ? data.currentPrice * data.amount : 0;\n            return data;\n        }));\n    };\n\n    const updateTable = (tableData, tableOptions = options) => {\n        const total = updateTotal(tableData);\n\n        setTableData(tableData.map(data => {\n            data.currentShare = data?.currentSum && total?.currentSum ? +(data.currentSum / total.currentSum * 100).toFixed(1) : 0;\n            data.differenceBetweenShares = data.desiredShare ? +(data.desiredShare - data.currentShare).toFixed(1) : null;\n            data.requiredSum = data.desiredShare ? +((data.desiredShare / 100) * (total.currentSum + tableOptions?.replenishment)).toFixed(1) : null;\n            data.recommendation = data.recommendation = getRecommendation(data, tableOptions);\n            return data;\n        }));\n\n        validateTable(tableData, total);\n    };\n\n    const updateTotal = (data) => {\n        const newTotal = data.reduce((value, data) => {\n            value.desiredShare = value.desiredShare + +data.desiredShare;\n            value.currentSum = value.currentSum + data.currentSum;\n            return value;\n        }, defaultTotal);\n        setTotal(newTotal);\n        return newTotal;\n    };\n\n    const validateTable = (data, total) => {\n        const newMessages = [];\n\n        if (total.desiredShare > 100) {\n            newMessages.push('Желаемая доля больше 100%');\n        }\n\n        setMessages(newMessages);\n    }\n\n    const getRecommendation = (data, tableOptions) => {\n        const recommendation = Math.floor((data.requiredSum - data.currentSum) / data.currentPrice);\n\n        if (tableOptions?.type === 'purchase' && recommendation < 1) {\n            return null;\n        }\n        if (tableOptions?.type === 'sale' && recommendation > 0) {\n            return null;\n        }\n\n        return recommendation;\n    }\n\n    return (\n        <div className=\"home\">\n            <div className=\"mb\">\n                <h1>Ребалансировка портфеля</h1>\n            </div>\n            <Options options={options} handleChangeOptions={handleChangeOptions}/>\n            <Alerts messages={messages}/>\n            <RebalanceTable tableData={tableData} total={total} addTicker={addTicker} updateTicker={updateTicker} removeTicker={removeTicker}/>\n        </div>\n    );\n};\n\nexport default Home;\n","import Home from './Home/Home';\n\nfunction App() {\n  return (\n    <Home/>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}